# -*- coding: utf-8 -*-
"""color_complexity_street.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LDNHv_xoRInXkGfJQdiAX2pxjtLI-hWF
"""

import csv
import numpy as np
from scipy.stats import entropy
import matplotlib.pyplot as plt


def calculate_color_distribution(colors):
    """Calculate color distribution using entropy."""
    # todo: maybe you can adjust bins number for better output
    hist, _ = np.histogramdd(colors, bins=4, range=[[0, 255], [0, 255], [0, 255]])
    hist_norm = hist / hist.sum()
    return entropy(hist_norm.flatten())


# 指定文件路径
input_file = 'D:\\project\\city_AI\\final_merged_data_third round.csv'

# 读取CSV文件并计算颜色复杂度
street_complexity = {}
with open(input_file, 'r') as file:
    csv_reader = csv.DictReader(file)
    for row in csv_reader:
        street_name = row['Street Name']
        r = float(row['R'])
        g = float(row['G'])
        b = float(row['B'])
        if street_name not in street_complexity:
            street_complexity[street_name] = []
        street_complexity[street_name].append([r, g, b])

for street_name, colors in street_complexity.items():
    colors = np.array(colors)
    complexity = calculate_color_distribution(colors)
    street_complexity[street_name] = complexity

# 对街道按颜色复杂度进行排序
sorted_street_complexity = {k: v for k, v in sorted(street_complexity.items(), key=lambda item: item[1], reverse=True)}

# 绘制条形图
plt.figure(figsize=(30, 15))  # 增大图表尺寸
plt.bar(range(len(sorted_street_complexity)), sorted_street_complexity.values())  # 使用数字索引作为x轴
plt.xticks(range(len(sorted_street_complexity)), sorted_street_complexity.keys(), rotation=90, ha='center')  # 旋转90度以避免标签重叠
plt.xlabel('Street Name')
plt.ylabel('Color Complexity')
plt.title('Color Complexity Analysis of Streets')
plt.tight_layout()
plt.savefig('color_complexity_analysis.pdf', format='pdf')  # 保存为PDF文件
plt.show()