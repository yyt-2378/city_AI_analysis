# -*- coding: utf-8 -*-
"""Dominant color for eighty street.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/127SVNFVBbDsJTJHPZBOXPto-pz-i0aEH
"""

import cv2
import numpy as np
import os
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

def process_image(image_path, value_threshold=10):
    image = cv2.imread(image_path)
    if image is None:
        return None

    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image_hsv = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2HSV)

    not_black = image_hsv[:, :, 2] > value_threshold
    filtered_pixels = image_rgb[not_black].reshape((-1, 3))

    return filtered_pixels

def analyze_colors(pixels, n_clusters=20):
    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(pixels)
    centers = kmeans.cluster_centers_
    labels = kmeans.labels_
    label_counts = np.bincount(labels)
    color_proportions = label_counts / len(labels)

    return centers, color_proportions

def save_results(folder_path, centers, color_proportions, n_clusters, output_folder):
    colors_normalized = centers / 255.0
    centers_hsv = cv2.cvtColor(centers.reshape(-1, 1, 3).astype(np.uint8), cv2.COLOR_RGB2HSV).reshape(-1, 3)

    sorted_indices = np.argsort(color_proportions)[::-1]
    sorted_centers = centers[sorted_indices]
    sorted_centers_hsv = centers_hsv[sorted_indices]
    sorted_color_proportions = color_proportions[sorted_indices]

    fig, ax = plt.subplots(figsize=(14, 10))
    bar_positions = np.arange(n_clusters)
    bars = ax.barh(bar_positions, sorted_color_proportions * 100, color=colors_normalized[sorted_indices])

    for bar, rgb, hsv, proportion in zip(bars, sorted_centers, sorted_centers_hsv, sorted_color_proportions):
        text = f'RGB: {rgb.astype(int)}\nHSV: {hsv.astype(int)}\n{proportion*100:.2f}%'
        ax.text(bar.get_width() + 0.5, bar.get_y() + bar.get_height() / 2, text,
                va='center', ha='left', fontsize=6)

    folder_name = os.path.basename(folder_path)
    ax.set_title(f'{folder_name} Color Analysis')
    ax.set_xlabel('Proportion (%)')
    ax.set_ylabel('Color')
    chart_path = os.path.join(output_folder, f"{folder_name}_color_chart.png")
    plt.tight_layout()
    plt.savefig(chart_path)
    plt.close()

    data = [{"RGB": rgb.tolist(), "HSV": hsv.tolist(), "Proportion": proportion} for rgb, hsv, proportion in zip(sorted_centers, sorted_centers_hsv, sorted_color_proportions)]
    df = pd.DataFrame(data)
    excel_path = os.path.join(output_folder, f"{folder_name}_color_analysis.xlsx")
    df.to_excel(excel_path, index=False)

    return chart_path, excel_path

def process_folder(top_folder_path, output_folder, value_threshold=30, n_clusters=20):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for root, dirs, files in os.walk(top_folder_path):
        for subdir in dirs:
            subdir_path = os.path.join(root, subdir)
            all_pixels = []
            for file in os.listdir(subdir_path):
                if file.lower().endswith(('png', 'jpg', 'jpeg')):
                    image_path = os.path.join(subdir_path, file)
                    pixels = process_image(image_path, value_threshold=value_threshold)
                    if pixels is not None:
                        all_pixels.append(pixels)

            if all_pixels:
                all_pixels = np.concatenate(all_pixels, axis=0)
                centers, color_proportions = analyze_colors(all_pixels, n_clusters=n_clusters)
                save_results(subdir_path, centers, color_proportions, n_clusters, output_folder)

top_folder_path = '/content/drive/MyDrive/SHOPHOUSE/shophouse image/image processed（by lijiali)/image processed（by lijiali)/KG_final_processed_STREET'
output_folder_path = '/content/drive/MyDrive/SHOPHOUSE/shophouse color analyse/black_hue_range/KG(black_hue_range)value_threshold10'

process_folder(top_folder_path, output_folder_path, value_threshold=30, n_clusters=20)