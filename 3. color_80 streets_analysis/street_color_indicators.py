# -*- coding: utf-8 -*-
"""Street color indicators.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aVGiiAsDi6yv7CYirKNDbYdWFhvk1KyI

**Average S and V**
"""

import pandas as pd
import matplotlib.pyplot as plt
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Read the CSV file
file_path = '/content/drive/MyDrive/SHOPHOUSE/shophouse color analyse/data csv/street two sides/all_merged_data_20_main_color 4.23（ascending).csv'
df = pd.read_csv(file_path)

# Extract HSV values from the 'HSV' string column
df[['H', 'S', 'V']] = df['HSV'].str.split(',', expand=True).astype(float)

# Create 'District_Street' column
df['District_Street'] = df['District'] + '_' + df['StreetName']

# Calculate the average H, S, and V values for each 'District_Street'
avg_hsv = df.groupby('District_Street')[['H', 'S', 'V']].mean().reset_index()

# Plotting function
def plot_hsv(column, title, color):
    plt.figure(figsize=(20, 10))
    sorted_df = avg_hsv.sort_values(by=column)
    plt.bar(sorted_df['District_Street'], sorted_df[column], color=color)
    plt.xlabel('District_Street')
    plt.ylabel(title)
    plt.xticks(rotation=90, fontsize=8)
    plt.title('Average ' + title)
    plt.tight_layout()
    plt.savefig(f'/content/drive/MyDrive/SHOPHOUSE/calculate/4.26_{column.lower()}.jpg', format='jpg', dpi=300)
    plt.savefig(f'/content/drive/MyDrive/SHOPHOUSE/calculate/4.26_{column.lower()}.pdf', format='pdf')
    plt.close()

# Plot and save the figures
plot_hsv('H', 'Hue', 'orange')
plot_hsv('S', 'Saturation', 'green')
plot_hsv('V', 'Value', 'blue')

# Add 'District' and 'Street Name' columns to the averaged HSV dataframe
avg_hsv[['District', 'Street_Name']] = avg_hsv['District_Street'].str.split('_', n=1, expand=True)

# Select columns to save to Excel
avg_hsv = avg_hsv[['District_Street', 'District', 'Street_Name', 'H', 'S', 'V']]

# Save the dataframe to an Excel file
excel_file_path = f'/content/drive/MyDrive/SHOPHOUSE/calculate/4.26/street_avg_hsv.xlsx'
avg_hsv.to_excel(excel_file_path, index=False)

# Print out the file paths to the saved figures and Excel file
print(f"Saved figures to: /content/drive/MyDrive/SHOPHOUSE/calculate/4.26")
print(f"Saved Excel file to: {excel_file_path}")

import csv
import numpy as np
from scipy.stats import entropy
import matplotlib.pyplot as plt
from google.colab import drive

# 挂载Google Drive
drive.mount('/content/drive')

"""**color_complexity**"""

input_file = '/content/drive/MyDrive/SHOPHOUSE/shophouse color analyse/data csv/street two sides/Final_Merged_Data_4.29.csv'

def calculate_color_distribution(colors):
    """Calculate color distribution using entropy."""
    hist, _ = np.histogramdd(colors, bins=2, range=[[0, 255], [0, 255], [0, 255]])
    hist_norm = hist / hist.sum()
    return entropy(hist_norm.flatten())

street_complexity = {}
with open(input_file, 'r') as file:
    csv_reader = csv.DictReader(file)
    for row in csv_reader:
        # 组合'District'和'Street Name'列
        street_name = f"({row['District']}) {row['StreetName']}"
        r = float(row['R'])
        g = float(row['G'])
        b = float(row['B'])
        if street_name not in street_complexity:
            street_complexity[street_name] = []
        street_complexity[street_name].append([r, g, b])

for street_name, colors in street_complexity.items():
    colors = np.array(colors)
    complexity = calculate_color_distribution(colors)
    street_complexity[street_name] = complexity

sorted_street_complexity = {k: v for k, v in sorted(street_complexity.items(), key=lambda item: item[1], reverse=True)}

plt.figure(figsize=(30, 15))  # 增大图表尺寸
plt.bar(range(len(sorted_street_complexity)), sorted_street_complexity.values())  # 使用数字索引作为x轴
plt.xticks(range(len(sorted_street_complexity)), sorted_street_complexity.keys(), rotation=90, ha='center')  # 旋转90度以避免标签重叠
plt.xlabel('Street Name')
plt.ylabel('Color Complexity')
plt.title('Color Complexity Analysis of Streets')
plt.tight_layout()

jpeg_output_path = '/content/drive/MyDrive/SHOPHOUSE/calculate/4.30/color_complexity_analysis_bin2_2.jpg'
plt.savefig(jpeg_output_path, format='jpg', dpi=300)  # DPI设置为300为高清晰度

pdf_output_path = '/content/drive/MyDrive/SHOPHOUSE/calculate/4.30/color_complexity_analysis_bin2_2.pdf'
plt.savefig(pdf_output_path, format='pdf')

plt.show()

"""# ***color_coordination***


"""

from sklearn.cluster import KMeans
import numpy as np
from skimage.color import rgb2lab, deltaE_cie76
import pandas as pd
import matplotlib.pyplot as plt

# Define a function to calculate color harmony
def calculate_color_harmony(dominant_colors):
    # Convert colors to LAB color space
    dominant_colors_lab = rgb2lab(np.array([dominant_colors]) / 255)
    harmony_scores = []
    # Compare every color with each other to get the harmony score
    for i in range(dominant_colors_lab.shape[1]):
        for j in range(i + 1, dominant_colors_lab.shape[1]):
            delta_e = deltaE_cie76(dominant_colors_lab[0][i], dominant_colors_lab[0][j])
            harmony_scores.append(delta_e)
    # Return the average harmony score
    return np.mean(harmony_scores)

# Read the CSV file
df = pd.read_csv('/content/drive/MyDrive/SHOPHOUSE/shophouse color analyse/data csv/street two sides/Final_Merged_Data_4.29.csv')

# Create a dictionary to hold the color harmony score for each street
street_harmony = {}

# Loop through each unique combination of District and Street Name
for (district, street), group in df.groupby(['District', 'StreetName']):
    # Extract the RGB colors
    colors = group[['R', 'G', 'B']].values
    # Calculate the color harmony
    harmony_score = calculate_color_harmony(colors)
    # Create the label for the street
    street_label = f"{district}_{street}"
    # Store the harmony score in the dictionary
    street_harmony[street_label] = {'District': district, 'StreetName': street, 'Color Harmony Score': harmony_score}

# Convert the dictionary to a DataFrame for easier sorting and plotting
harmony_df = pd.DataFrame.from_dict(street_harmony, orient='index')

# Sort the streets by their harmony score in descending order
harmony_df_sorted = harmony_df.sort_values(by='Color Harmony Score', ascending=False)

# Plot the color harmony scores
plt.figure(figsize=(30, 15))
plt.bar(harmony_df_sorted.index, harmony_df_sorted['Color Harmony Score'], color='skyblue')
plt.xlabel('District_Street', fontsize=14)
plt.ylabel('Color Harmony Score', fontsize=14)
plt.xticks(rotation=90)
plt.title('Color Harmony Scores by Street', fontsize=16)
plt.tight_layout()

# Save the plot as a JPG
jpg_path = '/content/drive/MyDrive/SHOPHOUSE/calculate/4.30/street_color_harmony.jpg'
plt.savefig(jpg_path, dpi=300)

# Save the plot as a PDF
pdf_path = '/content/drive/MyDrive/SHOPHOUSE/calculate/4.30/street_color_harmony.pdf'
plt.savefig(pdf_path, format='pdf')

# Close the plot
plt.close()

# Save the harmony scores to an Excel file
excel_path = '/content/drive/MyDrive/SHOPHOUSE/calculate/4.30/street_color_harmony.xlsx'
harmony_df_sorted.to_excel(excel_path, index=False)

# Print the file paths to the saved chart and data
print("JPG file saved at:", jpg_path)
print("PDF file saved at:", pdf_path)
print("Excel file saved at:", excel_path)